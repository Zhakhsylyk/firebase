package com.example.introtokotlinfb

import android.app.Person
import android.net.wifi.hotspot2.pps.HomeSp
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.text.TextUtils
import android.util.Log
import android.widget.Toast
import com.google.android.gms.tasks.Task
import com.google.firebase.auth.AuthResult
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import kotlinx.android.synthetic.main.activity_main.*


class MainActivity : AppCompatActivity() {
    private var mAuth: FirebaseAuth? = null
    private var currentUser: FirebaseUser? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        var firebaseDatabase = FirebaseDatabase.getInstance()
        var databaseRef = firebaseDatabase.getReference("messages")

        mAuth = FirebaseAuth.getInstance()

        fun createAccount() {

            createAccID.setOnClickListener {
                if (TextUtils.isEmpty(emailID.text.toString())) {
                    emailID.error = "Please enter your Email"
                    return@setOnClickListener
                } else if (TextUtils.isEmpty(passwordID.text.toString())) {
                    passwordID.error = "Please enter your password"
                    return@setOnClickListener
                }

                var email = emailID.text.toString().trim()
                var pwd = passwordID.text.toString().trim()

                mAuth!!.createUserWithEmailAndPassword(email, pwd)
                        .addOnCompleteListener(this) { task: Task<AuthResult> ->
                            if (task.isSuccessful) {
                                var user: FirebaseUser = mAuth!!.currentUser!!
                                Log.d("User:", user.email.toString())
                            } else {
                                Log.d("Error:", task.toString())
                            }
                        }
            }
        }
        mAuth!!.signInWithEmailAndPassword("paulo@me.com", "password")
                .addOnCompleteListener { task: Task<AuthResult> ->
                    if (task.isSuccessful) {
                        Toast.makeText(this, "Signed In Successful",
                                Toast.LENGTH_LONG).show()
                    } else {
                        Toast.makeText(this, "Signed In Unsuccessful",
                                Toast.LENGTH_LONG).show()
                    }
                }


        var employee = Employee("James Bond", "Android Developer", "123 South Street", 32)

        // databaseRef.setValue(employee)


        databaseRef.addValueEventListener(object : ValueEventListener{
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                var value = dataSnapshot!!.value as HashMap<String, Any>

                //  Log.d("VALUE: ", value.toString())
            }

            override fun onCancelled(error: DatabaseError) {
                Log.d("Error", error!!.message)
            }

        })
    }

    override fun onStart() {
        super.onStart()

        currentUser = mAuth!!.currentUser
        if (currentUser != null) {
            Toast.makeText(this, "User is logged in", Toast.LENGTH_LONG).show()
        } else {
            { Toast.makeText(this, "User is logged out", Toast.LENGTH_LONG).show() }
        }

    }

    class Employee(){
        var name: String? = null
        var position: String? = null
        var homeAddress: String? = null
        var age: Int? = null

        constructor(name:String,position:String, homeAddress: String, age: Int) : this() {
            this.name = name
            this.position = position
            this.homeAddress = homeAddress
            this.age = age
        }
    }
}
